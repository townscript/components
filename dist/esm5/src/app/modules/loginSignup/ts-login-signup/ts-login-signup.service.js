import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';
import { ApiService } from '../../../shared/services/api-service';
import { config } from '../../../core/app-config';
var TsLoginSignupService = /** @class */ (function () {
    function TsLoginSignupService(apiService, http) {
        var _this = this;
        this.apiService = apiService;
        this.http = http;
        this.token = config.token;
        this.headers = new HttpHeaders().set('Authorization', this.token);
        this.CAPTCHA_SITE_INVISIBLE_CAPTCHA_KEY = config.CAPTCHA_SITE_INVISIBLE_CAPTCHA_KEY;
        this.getUserSignUpDetails = function (emailId) {
            var params = new HttpParams({ fromString: "email=" + emailId });
            return _this.http.get(_this.apiService.API_SERVER + 'user/getusersignupdetails', { params: params, headers: _this.headers });
        };
        this.loginWithTownscript = function (emailId, password) {
            var formData = new FormData();
            formData.set('emailId', emailId);
            formData.set('password', password);
            return _this.http.post(_this.apiService.API_SERVER + 'user/loginwithtownscript', formData, { headers: _this.headers });
        };
        this.registerWithTownscriptWithCaptcha = function (formData) {
            return _this.http.post(_this.apiService.API_SERVER + 'user/registerwithtownscriptwithcaptcha', formData, { headers: _this.headers, responseType: 'text' });
        };
        this.sendForgotPwdEmail = function (emailId) {
            var forgotPassword = new FormData();
            forgotPassword.set('emailId', emailId);
            return _this.http.post(_this.apiService.API_SERVER + 'verify/sendforgotpwdemail', forgotPassword, { headers: _this.headers });
        };
        this.resendVerificationCode = function (rdurl, emailId) {
            var formData = new FormData();
            formData.append('rdurl', rdurl);
            formData.append('emailid', emailId);
            return _this.http.post(_this.apiService.API_SERVER + 'user/resendverificationcode', formData, { headers: _this.headers });
        };
    }
    TsLoginSignupService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [ApiService, HttpClient])
    ], TsLoginSignupService);
    return TsLoginSignupService;
}());
export { TsLoginSignupService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHMtbG9naW4tc2lnbnVwLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdG93bnNjcmlwdC9jb21wb25lbnRzLyIsInNvdXJjZXMiOlsic3JjL2FwcC9tb2R1bGVzL2xvZ2luU2lnbnVwL3RzLWxvZ2luLXNpZ251cC90cy1sb2dpbi1zaWdudXAuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUMzRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDbEUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBR2xEO0lBTUksOEJBQW1CLFVBQXNCLEVBQVUsSUFBZ0I7UUFBbkUsaUJBQ0M7UUFEa0IsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUFVLFNBQUksR0FBSixJQUFJLENBQVk7UUFKbkUsVUFBSyxHQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDMUIsWUFBTyxHQUFHLElBQUksV0FBVyxFQUFFLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDN0QsdUNBQWtDLEdBQUcsTUFBTSxDQUFDLGtDQUFrQyxDQUFDO1FBSy9FLHlCQUFvQixHQUFHLFVBQUMsT0FBTztZQUM3QixJQUFNLE1BQU0sR0FBRyxJQUFJLFVBQVUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxRQUFRLEdBQUcsT0FBTyxFQUFDLENBQUMsQ0FBQztZQUNqRSxPQUFPLEtBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxHQUFHLDJCQUEyQixFQUN6RSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLEtBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQ2pELENBQUMsQ0FBQTtRQUVELHdCQUFtQixHQUFHLFVBQUMsT0FBTyxFQUFFLFFBQVE7WUFDdEMsSUFBSSxRQUFRLEdBQUcsSUFBSSxRQUFRLEVBQUUsQ0FBQztZQUM5QixRQUFRLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztZQUNqQyxRQUFRLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQztZQUNuQyxPQUFPLEtBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxHQUFHLDBCQUEwQixFQUN6RSxRQUFRLEVBQUUsRUFBRyxPQUFPLEVBQUUsS0FBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDNUMsQ0FBQyxDQUFBO1FBRUQsc0NBQWlDLEdBQUcsVUFBQyxRQUFRO1lBQzNDLE9BQU8sS0FBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEdBQUcsd0NBQXdDLEVBQ3ZGLFFBQVEsRUFBRSxFQUFFLE9BQU8sRUFBRSxLQUFJLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBQ2pFLENBQUMsQ0FBQTtRQUVELHVCQUFrQixHQUFHLFVBQUMsT0FBTztZQUMzQixJQUFJLGNBQWMsR0FBRyxJQUFJLFFBQVEsRUFBRSxDQUFDO1lBQ3BDLGNBQWMsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ3ZDLE9BQU8sS0FBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEdBQUcsMkJBQTJCLEVBQzFFLGNBQWMsRUFBRSxFQUFFLE9BQU8sRUFBRSxLQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUNqRCxDQUFDLENBQUE7UUFFRCwyQkFBc0IsR0FBRyxVQUFDLEtBQUssRUFBRSxPQUFPO1lBQ3RDLElBQU0sUUFBUSxHQUFHLElBQUksUUFBUSxFQUFFLENBQUM7WUFDaEMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDaEMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDcEMsT0FBTyxLQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsR0FBRyw2QkFBNkIsRUFDNUUsUUFBUSxFQUFFLEVBQUUsT0FBTyxFQUFFLEtBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQzNDLENBQUMsQ0FBQTtJQWxDRCxDQUFDO0lBUFEsb0JBQW9CO1FBRGhDLFVBQVUsRUFBRTtpREFPc0IsVUFBVSxFQUFnQixVQUFVO09BTjFELG9CQUFvQixDQTBDaEM7SUFBRCwyQkFBQztDQUFBLEFBMUNELElBMENDO1NBMUNZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBQYXJhbXMsIEh0dHBIZWFkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgQXBpU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9zZXJ2aWNlcy9hcGktc2VydmljZSc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuLi8uLi8uLi9jb3JlL2FwcC1jb25maWcnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVHNMb2dpblNpZ251cFNlcnZpY2Uge1xuXG4gICAgdG9rZW46IGFueSA9IGNvbmZpZy50b2tlbjtcbiAgICBoZWFkZXJzID0gbmV3IEh0dHBIZWFkZXJzKCkuc2V0KCdBdXRob3JpemF0aW9uJywgdGhpcy50b2tlbik7XG4gICAgQ0FQVENIQV9TSVRFX0lOVklTSUJMRV9DQVBUQ0hBX0tFWSA9IGNvbmZpZy5DQVBUQ0hBX1NJVEVfSU5WSVNJQkxFX0NBUFRDSEFfS0VZO1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIGFwaVNlcnZpY2U6IEFwaVNlcnZpY2UsIHByaXZhdGUgaHR0cDogSHR0cENsaWVudCkge1xuICAgIH1cblxuICAgIGdldFVzZXJTaWduVXBEZXRhaWxzID0gKGVtYWlsSWQpID0+IHtcbiAgICAgIGNvbnN0IHBhcmFtcyA9IG5ldyBIdHRwUGFyYW1zKHsgZnJvbVN0cmluZzogYGVtYWlsPWAgKyBlbWFpbElkfSk7XG4gICAgICByZXR1cm4gdGhpcy5odHRwLmdldCh0aGlzLmFwaVNlcnZpY2UuQVBJX1NFUlZFUiArICd1c2VyL2dldHVzZXJzaWdudXBkZXRhaWxzJyxcbiAgICAgICAgICB7IHBhcmFtczogcGFyYW1zLCBoZWFkZXJzOiB0aGlzLmhlYWRlcnMgfSk7XG4gICAgfVxuXG4gICAgbG9naW5XaXRoVG93bnNjcmlwdCA9IChlbWFpbElkLCBwYXNzd29yZCkgPT4ge1xuICAgICAgbGV0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgICBmb3JtRGF0YS5zZXQoJ2VtYWlsSWQnLCBlbWFpbElkKTtcbiAgICAgIGZvcm1EYXRhLnNldCgncGFzc3dvcmQnLCBwYXNzd29yZCk7XG4gICAgICByZXR1cm4gdGhpcy5odHRwLnBvc3QodGhpcy5hcGlTZXJ2aWNlLkFQSV9TRVJWRVIgKyAndXNlci9sb2dpbndpdGh0b3duc2NyaXB0JyxcbiAgICAgICAgICBmb3JtRGF0YSwgeyAgaGVhZGVyczogdGhpcy5oZWFkZXJzIH0pO1xuICAgIH1cblxuICAgIHJlZ2lzdGVyV2l0aFRvd25zY3JpcHRXaXRoQ2FwdGNoYSA9IChmb3JtRGF0YSkgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0KHRoaXMuYXBpU2VydmljZS5BUElfU0VSVkVSICsgJ3VzZXIvcmVnaXN0ZXJ3aXRodG93bnNjcmlwdHdpdGhjYXB0Y2hhJyxcbiAgICAgICAgICBmb3JtRGF0YSwgeyBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsIHJlc3BvbnNlVHlwZTogJ3RleHQnIH0pO1xuICAgIH1cblxuICAgIHNlbmRGb3Jnb3RQd2RFbWFpbCA9IChlbWFpbElkKSA9PiB7XG4gICAgICBsZXQgZm9yZ290UGFzc3dvcmQgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgIGZvcmdvdFBhc3N3b3JkLnNldCgnZW1haWxJZCcsIGVtYWlsSWQpO1xuICAgICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0KHRoaXMuYXBpU2VydmljZS5BUElfU0VSVkVSICsgJ3ZlcmlmeS9zZW5kZm9yZ290cHdkZW1haWwnLFxuICAgICAgICAgIGZvcmdvdFBhc3N3b3JkLCB7IGhlYWRlcnM6IHRoaXMuaGVhZGVycyB9KTtcbiAgICB9XG5cbiAgICByZXNlbmRWZXJpZmljYXRpb25Db2RlID0gKHJkdXJsLCBlbWFpbElkKSA9PiB7XG4gICAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgICAgZm9ybURhdGEuYXBwZW5kKCdyZHVybCcsIHJkdXJsKTtcbiAgICAgIGZvcm1EYXRhLmFwcGVuZCgnZW1haWxpZCcsIGVtYWlsSWQpO1xuICAgICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0KHRoaXMuYXBpU2VydmljZS5BUElfU0VSVkVSICsgJ3VzZXIvcmVzZW5kdmVyaWZpY2F0aW9uY29kZScsXG4gICAgICAgICAgZm9ybURhdGEsIHsgaGVhZGVyczogdGhpcy5oZWFkZXJzIH0pO1xuICAgIH1cbn1cbiJdfQ==