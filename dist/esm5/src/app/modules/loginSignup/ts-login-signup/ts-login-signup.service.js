import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';
import { ApiService } from '../../../shared/services/api-service';
var TsLoginSignupService = /** @class */ (function () {
    function TsLoginSignupService(apiService, http) {
        var _this = this;
        this.apiService = apiService;
        this.http = http;
        this.headers = new HttpHeaders().set('Authorization', 'eyJhbGciOiJIUzUxMiJ9.eyJST0xFIjoiUk9MRV9DTElFTlQiLCJzdWIiOiJhcGlAdG93bnNjcmlwdC5jb20iLCJhdWRpZW5jZSI6IndlYiIsImNyZWF0ZWQiOjE1NjUyNTA4ODc2MDUsIlVTRVJfSUQiOjAsImV4cCI6MTU3MzAyNjg4N30.gfDC_wGGN05zCxhLKRm2uY_QjypCiz5qfwm7U0PqkIrywoDGuGcgDa9d1Vo9ftprpZ78A62HY-w4kjfiLOKC7g');
        this.getUserSignUpDetails = function (emailId) {
            var params = new HttpParams({ fromString: "email=" + emailId });
            return _this.http.get(_this.apiService.API_SERVER + 'user/getusersignupdetails', { params: params, headers: _this.headers });
        };
        this.loginWithTownscript = function (emailId, password) {
            var formData = new FormData();
            formData.set('emailId', emailId);
            formData.set('password', password);
            return _this.http.post(_this.apiService.API_SERVER + 'user/loginwithtownscript', formData, { headers: _this.headers });
        };
        this.registerWithTownscriptWithCaptcha = function (formData) {
            return _this.http.post(_this.apiService.API_SERVER + 'user/registerwithtownscriptwithcaptcha', formData, { headers: _this.headers, responseType: 'text' });
        };
        this.sendForgotPwdEmail = function (emailId) {
            var forgotPassword = new FormData();
            forgotPassword.set('emailId', emailId);
            return _this.http.post(_this.apiService.API_SERVER + 'verify/sendforgotpwdemail', forgotPassword, { headers: _this.headers });
        };
        this.resendVerificationCode = function (rdurl, emailId) {
            var formData = new FormData();
            formData.append('rdurl', rdurl);
            formData.append('emailid', emailId);
            return _this.http.post(_this.apiService.API_SERVER + 'user/resendverificationcode', formData, { headers: _this.headers });
        };
    }
    TsLoginSignupService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [ApiService, HttpClient])
    ], TsLoginSignupService);
    return TsLoginSignupService;
}());
export { TsLoginSignupService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHMtbG9naW4tc2lnbnVwLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdG93bnNjcmlwdC9jb21wb25lbnRzLyIsInNvdXJjZXMiOlsic3JjL2FwcC9tb2R1bGVzL2xvZ2luU2lnbnVwL3RzLWxvZ2luLXNpZ251cC90cy1sb2dpbi1zaWdudXAuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUMzRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFHbEU7SUFNRSw4QkFBbUIsVUFBc0IsRUFBVSxJQUFnQjtRQUFuRSxpQkFDQztRQURrQixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQVUsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUhuRSxZQUFPLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUM3Qyw2UUFBNlEsQ0FBQyxDQUFDO1FBS2pSLHlCQUFvQixHQUFHLFVBQUMsT0FBTztZQUM3QixJQUFNLE1BQU0sR0FBRyxJQUFJLFVBQVUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxRQUFRLEdBQUcsT0FBTyxFQUFFLENBQUMsQ0FBQztZQUNsRSxPQUFPLEtBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxHQUFHLDJCQUEyQixFQUMzRSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLEtBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQy9DLENBQUMsQ0FBQTtRQUVELHdCQUFtQixHQUFHLFVBQUMsT0FBTyxFQUFFLFFBQVE7WUFDdEMsSUFBTSxRQUFRLEdBQUcsSUFBSSxRQUFRLEVBQUUsQ0FBQztZQUNoQyxRQUFRLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztZQUNqQyxRQUFRLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQztZQUNuQyxPQUFPLEtBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxHQUFHLDBCQUEwQixFQUMzRSxRQUFRLEVBQUUsRUFBRSxPQUFPLEVBQUUsS0FBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDekMsQ0FBQyxDQUFBO1FBRUQsc0NBQWlDLEdBQUcsVUFBQyxRQUFRO1lBQzNDLE9BQU8sS0FBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEdBQUcsd0NBQXdDLEVBQ3pGLFFBQVEsRUFBRSxFQUFFLE9BQU8sRUFBRSxLQUFJLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBQy9ELENBQUMsQ0FBQTtRQUVELHVCQUFrQixHQUFHLFVBQUMsT0FBTztZQUMzQixJQUFNLGNBQWMsR0FBRyxJQUFJLFFBQVEsRUFBRSxDQUFDO1lBQ3RDLGNBQWMsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ3ZDLE9BQU8sS0FBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEdBQUcsMkJBQTJCLEVBQzVFLGNBQWMsRUFBRSxFQUFFLE9BQU8sRUFBRSxLQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUMvQyxDQUFDLENBQUE7UUFFRCwyQkFBc0IsR0FBRyxVQUFDLEtBQUssRUFBRSxPQUFPO1lBQ3RDLElBQU0sUUFBUSxHQUFHLElBQUksUUFBUSxFQUFFLENBQUM7WUFDaEMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDaEMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDcEMsT0FBTyxLQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsR0FBRyw2QkFBNkIsRUFDOUUsUUFBUSxFQUFFLEVBQUUsT0FBTyxFQUFFLEtBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQ3pDLENBQUMsQ0FBQTtJQWxDRCxDQUFDO0lBUFUsb0JBQW9CO1FBRGhDLFVBQVUsRUFBRTtpREFPb0IsVUFBVSxFQUFnQixVQUFVO09BTnhELG9CQUFvQixDQTBDaEM7SUFBRCwyQkFBQztDQUFBLEFBMUNELElBMENDO1NBMUNZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBQYXJhbXMsIEh0dHBIZWFkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgQXBpU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9zZXJ2aWNlcy9hcGktc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUc0xvZ2luU2lnbnVwU2VydmljZSB7XG5cbiAgdG9rZW46IGFueTtcbiAgaGVhZGVycyA9IG5ldyBIdHRwSGVhZGVycygpLnNldCgnQXV0aG9yaXphdGlvbicsXG4gICAgJ2V5SmhiR2NpT2lKSVV6VXhNaUo5LmV5SlNUMHhGSWpvaVVrOU1SVjlEVEVsRlRsUWlMQ0p6ZFdJaU9pSmhjR2xBZEc5M2JuTmpjbWx3ZEM1amIyMGlMQ0poZFdScFpXNWpaU0k2SW5kbFlpSXNJbU55WldGMFpXUWlPakUxTmpVeU5UQTRPRGMyTURVc0lsVlRSVkpmU1VRaU9qQXNJbVY0Y0NJNk1UVTNNekF5TmpnNE4zMC5nZkRDX3dHR04wNXpDeGhMS1JtMnVZX1FqeXBDaXo1cWZ3bTdVMFBxa0lyeXdvREd1R2NnRGE5ZDFWbzlmdHBycFo3OEE2MkhZLXc0a2pmaUxPS0M3ZycpO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBhcGlTZXJ2aWNlOiBBcGlTZXJ2aWNlLCBwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQpIHtcbiAgfVxuXG4gIGdldFVzZXJTaWduVXBEZXRhaWxzID0gKGVtYWlsSWQpID0+IHtcbiAgICBjb25zdCBwYXJhbXMgPSBuZXcgSHR0cFBhcmFtcyh7IGZyb21TdHJpbmc6IGBlbWFpbD1gICsgZW1haWxJZCB9KTtcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldCh0aGlzLmFwaVNlcnZpY2UuQVBJX1NFUlZFUiArICd1c2VyL2dldHVzZXJzaWdudXBkZXRhaWxzJyxcbiAgICAgIHsgcGFyYW1zOiBwYXJhbXMsIGhlYWRlcnM6IHRoaXMuaGVhZGVycyB9KTtcbiAgfVxuXG4gIGxvZ2luV2l0aFRvd25zY3JpcHQgPSAoZW1haWxJZCwgcGFzc3dvcmQpID0+IHtcbiAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgIGZvcm1EYXRhLnNldCgnZW1haWxJZCcsIGVtYWlsSWQpO1xuICAgIGZvcm1EYXRhLnNldCgncGFzc3dvcmQnLCBwYXNzd29yZCk7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0KHRoaXMuYXBpU2VydmljZS5BUElfU0VSVkVSICsgJ3VzZXIvbG9naW53aXRodG93bnNjcmlwdCcsXG4gICAgICBmb3JtRGF0YSwgeyBoZWFkZXJzOiB0aGlzLmhlYWRlcnMgfSk7XG4gIH1cblxuICByZWdpc3RlcldpdGhUb3duc2NyaXB0V2l0aENhcHRjaGEgPSAoZm9ybURhdGEpID0+IHtcbiAgICByZXR1cm4gdGhpcy5odHRwLnBvc3QodGhpcy5hcGlTZXJ2aWNlLkFQSV9TRVJWRVIgKyAndXNlci9yZWdpc3RlcndpdGh0b3duc2NyaXB0d2l0aGNhcHRjaGEnLFxuICAgICAgZm9ybURhdGEsIHsgaGVhZGVyczogdGhpcy5oZWFkZXJzLCByZXNwb25zZVR5cGU6ICd0ZXh0JyB9KTtcbiAgfVxuXG4gIHNlbmRGb3Jnb3RQd2RFbWFpbCA9IChlbWFpbElkKSA9PiB7XG4gICAgY29uc3QgZm9yZ290UGFzc3dvcmQgPSBuZXcgRm9ybURhdGEoKTtcbiAgICBmb3Jnb3RQYXNzd29yZC5zZXQoJ2VtYWlsSWQnLCBlbWFpbElkKTtcbiAgICByZXR1cm4gdGhpcy5odHRwLnBvc3QodGhpcy5hcGlTZXJ2aWNlLkFQSV9TRVJWRVIgKyAndmVyaWZ5L3NlbmRmb3Jnb3Rwd2RlbWFpbCcsXG4gICAgICBmb3Jnb3RQYXNzd29yZCwgeyBoZWFkZXJzOiB0aGlzLmhlYWRlcnMgfSk7XG4gIH1cblxuICByZXNlbmRWZXJpZmljYXRpb25Db2RlID0gKHJkdXJsLCBlbWFpbElkKSA9PiB7XG4gICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICBmb3JtRGF0YS5hcHBlbmQoJ3JkdXJsJywgcmR1cmwpO1xuICAgIGZvcm1EYXRhLmFwcGVuZCgnZW1haWxpZCcsIGVtYWlsSWQpO1xuICAgIHJldHVybiB0aGlzLmh0dHAucG9zdCh0aGlzLmFwaVNlcnZpY2UuQVBJX1NFUlZFUiArICd1c2VyL3Jlc2VuZHZlcmlmaWNhdGlvbmNvZGUnLFxuICAgICAgZm9ybURhdGEsIHsgaGVhZGVyczogdGhpcy5oZWFkZXJzIH0pO1xuICB9XG59XG4iXX0=