import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import * as momentImported from 'moment-timezone';
var moment = momentImported;
var TimeService = /** @class */ (function () {
    function TimeService() {
        var _this = this;
        this.moment = moment();
        this.convertDateToTimezone = function (date, timeZoneOffset) {
            var dateString = moment.tz(date, timeZoneOffset).format('YYYY-MM-DDTHH:mm:ss.sssZ');
            var tzon = [dateString.substr(0, 23), dateString.substr(24)];
            var currentSystemGMT = moment.tz(moment.tz.guess()).format("Z");
            return _this.formatLocalDate(new Date(tzon[0] + currentSystemGMT));
        };
        this.formatLocalDate = function (now) {
            var tzo = -now.getTimezoneOffset(), dif = tzo >= 0 ? '+' : '-', pad = function (num) {
                var norm = Math.abs(Math.floor(num));
                return (norm < 10 ? '0' : '') + norm;
            };
            return now.getFullYear()
                + '-' + pad(now.getMonth() + 1)
                + '-' + pad(now.getDate())
                + 'T' + pad(now.getHours())
                + ':' + pad(now.getMinutes())
                + ':' + pad(now.getSeconds())
                + '.000'
                + dif + pad(tzo / 60)
                + pad(tzo % 60);
        };
    }
    TimeService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [])
    ], TimeService);
    return TimeService;
}());
export { TimeService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRvd25zY3JpcHQvY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbInNyYy9hcHAvc2hhcmVkL3NlcnZpY2VzL3RpbWUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEtBQUssY0FBYyxNQUFNLGlCQUFpQixDQUFDO0FBRWxELElBQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUc5QjtJQUdJO1FBQUEsaUJBQ0M7UUFGRCxXQUFNLEdBQVEsTUFBTSxFQUFFLENBQUM7UUFJdkIsMEJBQXFCLEdBQUcsVUFBQyxJQUFJLEVBQUUsY0FBYztZQUN6QyxJQUFJLFVBQVUsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxjQUFjLENBQUMsQ0FBQyxNQUFNLENBQUMsMEJBQTBCLENBQUMsQ0FBQztZQUNwRixJQUFJLElBQUksR0FBRyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUM3RCxJQUFJLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNoRSxPQUFPLEtBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLGdCQUFnQixDQUFDLENBQUMsQ0FBQztRQUN0RSxDQUFDLENBQUM7UUFFRixvQkFBZSxHQUFHLFVBQUMsR0FBRztZQUNsQixJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxFQUM5QixHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQzFCLEdBQUcsR0FBRyxVQUFVLEdBQUc7Z0JBQ2YsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ3JDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQztZQUN6QyxDQUFDLENBQUM7WUFDTixPQUFPLEdBQUcsQ0FBQyxXQUFXLEVBQUU7a0JBQ2xCLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQztrQkFDN0IsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUM7a0JBQ3hCLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDO2tCQUN6QixHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsQ0FBQztrQkFDM0IsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLENBQUM7a0JBQzNCLE1BQU07a0JBQ04sR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDO2tCQUNuQixHQUFHLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ3hCLENBQUMsQ0FBQTtJQXpCRCxDQUFDO0lBSlEsV0FBVztRQUR2QixVQUFVLEVBQUU7O09BQ0EsV0FBVyxDQThCdkI7SUFBRCxrQkFBQztDQUFBLEFBOUJELElBOEJDO1NBOUJZLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgKiBhcyBtb21lbnRJbXBvcnRlZCBmcm9tICdtb21lbnQtdGltZXpvbmUnO1xuXG5jb25zdCBtb21lbnQgPSBtb21lbnRJbXBvcnRlZDtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFRpbWVTZXJ2aWNlIHtcblxuICAgIG1vbWVudDogYW55ID0gbW9tZW50KCk7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgfVxuXG4gICAgY29udmVydERhdGVUb1RpbWV6b25lID0gKGRhdGUsIHRpbWVab25lT2Zmc2V0KSA9PiB7XG4gICAgICAgIHZhciBkYXRlU3RyaW5nID0gbW9tZW50LnR6KGRhdGUsIHRpbWVab25lT2Zmc2V0KS5mb3JtYXQoJ1lZWVktTU0tRERUSEg6bW06c3Muc3NzWicpO1xuICAgICAgICB2YXIgdHpvbiA9IFtkYXRlU3RyaW5nLnN1YnN0cigwLCAyMyksIGRhdGVTdHJpbmcuc3Vic3RyKDI0KV07XG4gICAgICAgIHZhciBjdXJyZW50U3lzdGVtR01UID0gbW9tZW50LnR6KG1vbWVudC50ei5ndWVzcygpKS5mb3JtYXQoXCJaXCIpO1xuICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXRMb2NhbERhdGUobmV3IERhdGUodHpvblswXSArIGN1cnJlbnRTeXN0ZW1HTVQpKTtcbiAgICB9O1xuXG4gICAgZm9ybWF0TG9jYWxEYXRlID0gKG5vdykgPT4ge1xuICAgICAgICB2YXIgdHpvID0gLW5vdy5nZXRUaW1lem9uZU9mZnNldCgpLFxuICAgICAgICAgICAgZGlmID0gdHpvID49IDAgPyAnKycgOiAnLScsXG4gICAgICAgICAgICBwYWQgPSBmdW5jdGlvbiAobnVtKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5vcm0gPSBNYXRoLmFicyhNYXRoLmZsb29yKG51bSkpO1xuICAgICAgICAgICAgICAgIHJldHVybiAobm9ybSA8IDEwID8gJzAnIDogJycpICsgbm9ybTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIHJldHVybiBub3cuZ2V0RnVsbFllYXIoKVxuICAgICAgICAgICAgKyAnLScgKyBwYWQobm93LmdldE1vbnRoKCkgKyAxKVxuICAgICAgICAgICAgKyAnLScgKyBwYWQobm93LmdldERhdGUoKSlcbiAgICAgICAgICAgICsgJ1QnICsgcGFkKG5vdy5nZXRIb3VycygpKVxuICAgICAgICAgICAgKyAnOicgKyBwYWQobm93LmdldE1pbnV0ZXMoKSlcbiAgICAgICAgICAgICsgJzonICsgcGFkKG5vdy5nZXRTZWNvbmRzKCkpXG4gICAgICAgICAgICArICcuMDAwJ1xuICAgICAgICAgICAgKyBkaWYgKyBwYWQodHpvIC8gNjApXG4gICAgICAgICAgICArIHBhZCh0em8gJSA2MCk7XG4gICAgfVxufVxuIl19