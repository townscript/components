import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import * as momentImported from 'moment-timezone';
const moment = momentImported;
let TimeService = class TimeService {
    constructor() {
        this.moment = moment();
        this.convertDateToTimezone = (date, timeZoneOffset) => {
            var dateString = moment.tz(date, timeZoneOffset).format('YYYY-MM-DDTHH:mm:ss.sssZ');
            var tzon = [dateString.substr(0, 23), dateString.substr(24)];
            var currentSystemGMT = moment.tz(moment.tz.guess()).format("Z");
            return this.formatLocalDate(new Date(tzon[0] + currentSystemGMT));
        };
        this.formatLocalDate = (now) => {
            var tzo = -now.getTimezoneOffset(), dif = tzo >= 0 ? '+' : '-', pad = function (num) {
                var norm = Math.abs(Math.floor(num));
                return (norm < 10 ? '0' : '') + norm;
            };
            return now.getFullYear()
                + '-' + pad(now.getMonth() + 1)
                + '-' + pad(now.getDate())
                + 'T' + pad(now.getHours())
                + ':' + pad(now.getMinutes())
                + ':' + pad(now.getSeconds())
                + '.000'
                + dif + pad(tzo / 60)
                + pad(tzo % 60);
        };
    }
};
TimeService = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [])
], TimeService);
export { TimeService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRvd25zY3JpcHQvY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbInNyYy9hcHAvc2hhcmVkL3NlcnZpY2VzL3RpbWUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEtBQUssY0FBYyxNQUFNLGlCQUFpQixDQUFDO0FBRWxELE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUc5QixJQUFhLFdBQVcsR0FBeEIsTUFBYSxXQUFXO0lBR3BCO1FBREEsV0FBTSxHQUFRLE1BQU0sRUFBRSxDQUFDO1FBSXZCLDBCQUFxQixHQUFHLENBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRSxFQUFFO1lBQzdDLElBQUksVUFBVSxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLGNBQWMsQ0FBQyxDQUFDLE1BQU0sQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1lBQ3BGLElBQUksSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzdELElBQUksZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2hFLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO1FBQ3RFLENBQUMsQ0FBQztRQUVGLG9CQUFlLEdBQUcsQ0FBQyxHQUFHLEVBQUUsRUFBRTtZQUN0QixJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxFQUM5QixHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQzFCLEdBQUcsR0FBRyxVQUFVLEdBQUc7Z0JBQ2YsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ3JDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQztZQUN6QyxDQUFDLENBQUM7WUFDTixPQUFPLEdBQUcsQ0FBQyxXQUFXLEVBQUU7a0JBQ2xCLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQztrQkFDN0IsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUM7a0JBQ3hCLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDO2tCQUN6QixHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsQ0FBQztrQkFDM0IsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLENBQUM7a0JBQzNCLE1BQU07a0JBQ04sR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDO2tCQUNuQixHQUFHLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ3hCLENBQUMsQ0FBQTtJQXpCRCxDQUFDO0NBMEJKLENBQUE7QUE5QlksV0FBVztJQUR2QixVQUFVLEVBQUU7O0dBQ0EsV0FBVyxDQThCdkI7U0E5QlksV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCAqIGFzIG1vbWVudEltcG9ydGVkIGZyb20gJ21vbWVudC10aW1lem9uZSc7XG5cbmNvbnN0IG1vbWVudCA9IG1vbWVudEltcG9ydGVkO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVGltZVNlcnZpY2Uge1xuXG4gICAgbW9tZW50OiBhbnkgPSBtb21lbnQoKTtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICB9XG5cbiAgICBjb252ZXJ0RGF0ZVRvVGltZXpvbmUgPSAoZGF0ZSwgdGltZVpvbmVPZmZzZXQpID0+IHtcbiAgICAgICAgdmFyIGRhdGVTdHJpbmcgPSBtb21lbnQudHooZGF0ZSwgdGltZVpvbmVPZmZzZXQpLmZvcm1hdCgnWVlZWS1NTS1ERFRISDptbTpzcy5zc3NaJyk7XG4gICAgICAgIHZhciB0em9uID0gW2RhdGVTdHJpbmcuc3Vic3RyKDAsIDIzKSwgZGF0ZVN0cmluZy5zdWJzdHIoMjQpXTtcbiAgICAgICAgdmFyIGN1cnJlbnRTeXN0ZW1HTVQgPSBtb21lbnQudHoobW9tZW50LnR6Lmd1ZXNzKCkpLmZvcm1hdChcIlpcIik7XG4gICAgICAgIHJldHVybiB0aGlzLmZvcm1hdExvY2FsRGF0ZShuZXcgRGF0ZSh0em9uWzBdICsgY3VycmVudFN5c3RlbUdNVCkpO1xuICAgIH07XG5cbiAgICBmb3JtYXRMb2NhbERhdGUgPSAobm93KSA9PiB7XG4gICAgICAgIHZhciB0em8gPSAtbm93LmdldFRpbWV6b25lT2Zmc2V0KCksXG4gICAgICAgICAgICBkaWYgPSB0em8gPj0gMCA/ICcrJyA6ICctJyxcbiAgICAgICAgICAgIHBhZCA9IGZ1bmN0aW9uIChudW0pIHtcbiAgICAgICAgICAgICAgICB2YXIgbm9ybSA9IE1hdGguYWJzKE1hdGguZmxvb3IobnVtKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChub3JtIDwgMTAgPyAnMCcgOiAnJykgKyBub3JtO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG5vdy5nZXRGdWxsWWVhcigpXG4gICAgICAgICAgICArICctJyArIHBhZChub3cuZ2V0TW9udGgoKSArIDEpXG4gICAgICAgICAgICArICctJyArIHBhZChub3cuZ2V0RGF0ZSgpKVxuICAgICAgICAgICAgKyAnVCcgKyBwYWQobm93LmdldEhvdXJzKCkpXG4gICAgICAgICAgICArICc6JyArIHBhZChub3cuZ2V0TWludXRlcygpKVxuICAgICAgICAgICAgKyAnOicgKyBwYWQobm93LmdldFNlY29uZHMoKSlcbiAgICAgICAgICAgICsgJy4wMDAnXG4gICAgICAgICAgICArIGRpZiArIHBhZCh0em8gLyA2MClcbiAgICAgICAgICAgICsgcGFkKHR6byAlIDYwKTtcbiAgICB9XG59XG4iXX0=