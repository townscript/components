import { OnInit, AfterViewInit } from '@angular/core';
import { ApiService } from '../../../../shared/services/api-service';
import { HttpClient } from '@angular/common/http';
import { FormBuilder } from '@angular/forms';
import { RecaptchaComponent } from 'ng-recaptcha';
import { CookieService } from './cookie.service';
export declare class TsLoginSignupComponent implements OnInit, AfterViewInit {
    apiService: ApiService;
    private http;
    private fb;
    private cookieService;
    recaptchaRef: RecaptchaComponent;
    showSocial: boolean;
    show: boolean;
    showPassword: boolean;
    rdurl: string;
    ifSignIn: boolean;
    ifUnverified: boolean;
    ifSignUp: boolean;
    showVerifyEmail: boolean;
    showResetPassword: boolean;
    isUserVerified: any;
    CAPTCHA_SITE_INVISIBLE_CAPTCHA_KEY: string;
    userTimezone: string;
    loginForm: import("@angular/forms").FormGroup;
    captchaResponse: string;
    currScreen: string;
    correctPhoneNumber: any;
    phoneError: boolean;
    socialLoginMsg: boolean;
    constructor(apiService: ApiService, http: HttpClient, fb: FormBuilder, cookieService: CookieService);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    resolveAndProceed(captchaResponse: string): void;
    password: () => void;
    onLoginWithFB: () => void;
    onLoginWithGoogle: () => void;
    getEmailVerifyResponse: () => import("rxjs").Observable<Object>;
    verifyEmail: () => void;
    signIn: () => void;
    signup: () => void;
    forgotPassword: () => void;
    takeMeBack: () => void;
    postSignInCredentials: () => import("rxjs").Observable<Object>;
    resetPasswordCredentials: () => import("rxjs").Observable<Object>;
    redirectToListings: () => void;
    resetPassword: () => void;
    postSignupCredentials: () => import("rxjs").Observable<string>;
    randomString: (len: any, an: any) => string;
    resendVerifyEmail: () => void;
    resendVerifyEmailCredential: () => import("rxjs").Observable<Object>;
    hasError: (event: any) => void;
    telInputObject: (event: any) => void;
    onCountryChange: (event: any) => void;
    getNumber: (event: any) => void;
}
