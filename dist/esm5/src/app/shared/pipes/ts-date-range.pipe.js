import * as tslib_1 from "tslib";
import { Pipe } from '@angular/core';
import { DateTime } from 'luxon';
var RangeDatePipe = /** @class */ (function () {
    function RangeDatePipe() {
        var _this = this;
        this.days = { 'SU': 'Sun', 'MO': 'Mon', 'TU': 'Tue', 'WE': 'Wed', 'TH': 'Thu', 'FR': 'Fri', 'SA': 'Sat' };
        this.transform = function (rangeDates, isRecurrent, args) {
            if (rangeDates) {
                // for Recurring events
                if (isRecurrent && args['startTime'] != undefined) {
                    var startTime = args['startTime'];
                    var freq = args['recurrenceRuleArray'][0].split(';')[0].split('=')[1];
                    var freqLabel = 'Daily';
                    if (freq.toLowerCase() == 'Weekly'.toLowerCase()) {
                        var byDays = args['recurrenceRuleArray'][0].split(';')[2].split('=')[1].split(',');
                        if (byDays.length > 2) {
                            freqLabel = 'Multiple Dates';
                        }
                        else {
                            freqLabel = 'Every ';
                            for (var index = 0; index < byDays.length; index++) {
                                freqLabel += _this.days[byDays[index]];
                                if (index < (byDays.length - 1)) {
                                    freqLabel += ', ';
                                }
                            }
                        }
                    }
                    return freqLabel + ' | ' + startTime;
                }
                else {
                    var date = rangeDates.map(function (d) { return DateTime.fromISO(d).toFormat('dd'); });
                    var month = rangeDates.map(function (d) { return DateTime.fromISO(d).toFormat('MMM'); });
                    var year = rangeDates.map(function (d) { return DateTime.fromISO(d).toFormat('yy'); });
                    var time = DateTime.fromISO(rangeDates[0]).toFormat('hh:mm a');
                    if (year[0] !== year[1]) {
                        return month[0] + ' ' + date[0] + '\'' + year[0] + ' - ' + month[1] + ' ' + date[1] + '\'' + year[1] + ' | ' + time;
                    }
                    else {
                        if ((date[0] === date[1]) && (month[0] === month[1])) {
                            return month[0] + ' ' + date[0] + ' | ' + time;
                        }
                        else if ((month[0] !== month[1])) {
                            return month[0] + ' ' + date[0] + ' - ' + month[1] + ' ' + date[1] + ' | ' + time;
                        }
                        else {
                            return month[0] + ' ' + date[0] + ' - ' + date[1] + ' | ' + time;
                        }
                    }
                }
            }
            else {
                return null;
            }
        };
    }
    RangeDatePipe = tslib_1.__decorate([
        Pipe({
            name: 'dateRange'
        })
    ], RangeDatePipe);
    return RangeDatePipe;
}());
export { RangeDatePipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHMtZGF0ZS1yYW5nZS5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRvd25zY3JpcHQvY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbInNyYy9hcHAvc2hhcmVkL3BpcGVzL3RzLWRhdGUtcmFuZ2UucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUtqQztJQUhBO1FBQUEsaUJBbURDO1FBOUNHLFNBQUksR0FBUSxFQUFDLElBQUksRUFBQyxLQUFLLEVBQUMsSUFBSSxFQUFFLEtBQUssRUFBQyxJQUFJLEVBQUUsS0FBSyxFQUFDLElBQUksRUFBRSxLQUFLLEVBQUMsSUFBSSxFQUFFLEtBQUssRUFBQyxJQUFJLEVBQUUsS0FBSyxFQUFDLElBQUksRUFBRSxLQUFLLEVBQUMsQ0FBQztRQUVqRyxjQUFTLEdBQUcsVUFBQyxVQUFlLEVBQUUsV0FBaUIsRUFBRSxJQUFVO1lBQ3ZELElBQUksVUFBVSxFQUFFO2dCQUNaLHVCQUF1QjtnQkFDdkIsSUFBRyxXQUFXLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLFNBQVMsRUFBQztvQkFDL0MsSUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO29CQUNwQyxJQUFNLElBQUksR0FBSyxJQUFJLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUMxRSxJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUM7b0JBQ3hCLElBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLFFBQVEsQ0FBQyxXQUFXLEVBQUUsRUFBQzt3QkFDOUMsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLHFCQUFx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SSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUM7eUJBQ25GOzZCQUFNOzRCQUNMLE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDO3lCQUNsRTtxQkFDRjtpQkFDRjthQUNKO2lCQUFNO2dCQUNILE9BQU8sSUFBSSxDQUFDO2FBQ2Y7UUFDTCxDQUFDLENBQUE7SUFDTCxDQUFDO0lBaERZLGFBQWE7UUFIekIsSUFBSSxDQUFDO1lBQ0YsSUFBSSxFQUFFLFdBQVc7U0FDcEIsQ0FBQztPQUNXLGFBQWEsQ0FnRHpCO0lBQUQsb0JBQUM7Q0FBQSxBQWhERCxJQWdEQztTQWhEWSxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGF0ZVRpbWUgfSBmcm9tICdsdXhvbic7XG5cbkBQaXBlKHtcbiAgICBuYW1lOiAnZGF0ZVJhbmdlJ1xufSlcbmV4cG9ydCBjbGFzcyBSYW5nZURhdGVQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG5cbiAgICBkYXlzOiBhbnkgPSB7J1NVJzonU3VuJywnTU8nOiAnTW9uJywnVFUnOiAnVHVlJywnV0UnOiAnV2VkJywnVEgnOiAnVGh1JywnRlInOiAnRnJpJywnU0EnOiAnU2F0J307XG5cbiAgICB0cmFuc2Zvcm0gPSAocmFuZ2VEYXRlczogYW55LCBpc1JlY3VycmVudD86IGFueSAsYXJncz86IGFueSk6IGFueSA9PiB7XG4gICAgICAgIGlmIChyYW5nZURhdGVzKSB7XG4gICAgICAgICAgICAvLyBmb3IgUmVjdXJyaW5nIGV2ZW50c1xuICAgICAgICAgICAgaWYoaXNSZWN1cnJlbnQgJiYgYXJnc1snc3RhcnRUaW1lJ10gIT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgICAgY29uc3Qgc3RhcnRUaW1lID0gYXJnc1snc3RhcnRUaW1lJ107XG4gICAgICAgICAgICAgIGNvbnN0IGZyZXEgICA9IGFyZ3NbJ3JlY3VycmVuY2VSdWxlQXJyYXknXVswXS5zcGxpdCgnOycpWzBdLnNwbGl0KCc9JylbMV07XG4gICAgICAgICAgICAgIGxldCBmcmVxTGFiZWwgPSAnRGFpbHknO1xuICAgICAgICAgICAgICBpZihmcmVxLnRvTG93ZXJDYXNlKCkgPT0gJ1dlZWtseScudG9Mb3dlckNhc2UoKSl7XG4gICAgICAgICAgICAgICAgbGV0IGJ5RGF5cyA9IGFyZ3NbJ3JlY3VycmVuY2VSdWxlQXJyYXknXVswXS5zcGxpdCgnOycpWzJdLnNwbGl0KCc9JylbMV0uc3BsaXQoJywnKTtcbiAgICAgICAgICAgICAgICBpZihieURheXMubGVuZ3RoID4gMil7XG4gICAgICAgICAgICAgICAgICAgIGZyZXFMYWJlbCA9ICdNdWx0aXBsZSBEYXRlcyc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGZyZXFMYWJlbCA9ICdFdmVyeSAnO1xuICAgICAgICAgICAgICAgICAgZm9yKGxldCBpbmRleCA9IDA7aW5kZXggPCBieURheXMubGVuZ3RoOyBpbmRleCsrKXtcbiAgICAgICAgICAgICAgICAgICAgZnJlcUxhYmVsICs9IHRoaXMuZGF5c1tieURheXNbaW5kZXhdXTtcbiAgICAgICAgICAgICAgICAgICAgaWYoaW5kZXggPCAoYnlEYXlzLmxlbmd0aCAtIDEpKXtcbiAgICAgICAgICAgICAgICAgICAgICBmcmVxTGFiZWwgKz0gJywgJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gIGZyZXFMYWJlbCArICcgfCAnICsgc3RhcnRUaW1lO1xuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICBjb25zdCBkYXRlID0gcmFuZ2VEYXRlcy5tYXAoZCA9PiBEYXRlVGltZS5mcm9tSVNPKGQpLnRvRm9ybWF0KCdkZCcpKTtcbiAgICAgICAgICAgICAgY29uc3QgbW9udGggPSByYW5nZURhdGVzLm1hcChkID0+IERhdGVUaW1lLmZyb21JU08oZCkudG9Gb3JtYXQoJ01NTScpKTtcbiAgICAgICAgICAgICAgY29uc3QgeWVhciA9IHJhbmdlRGF0ZXMubWFwKGQgPT4gRGF0ZVRpbWUuZnJvbUlTTyhkKS50b0Zvcm1hdCgneXknKSk7XG4gICAgICAgICAgICAgIGNvbnN0IHRpbWUgPSBEYXRlVGltZS5mcm9tSVNPKHJhbmdlRGF0ZXNbMF0pLnRvRm9ybWF0KCdoaDptbSBhJyk7XG4gICAgICAgICAgICAgIGlmICh5ZWFyWzBdICE9PSB5ZWFyWzFdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoWzBdICsgJyAnICsgZGF0ZVswXSArICdcXCcnICsgeWVhclswXSArICcgLSAnICsgbW9udGhbMV0gKyAnICcgKyBkYXRlWzFdICsgJ1xcJycgKyB5ZWFyWzFdICsgJyB8ICcgKyB0aW1lO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICgoZGF0ZVswXSA9PT0gZGF0ZVsxXSkgJiYgKG1vbnRoWzBdID09PSBtb250aFsxXSkpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBtb250aFswXSArICcgJyArIGRhdGVbMF0gKyAnIHwgJyArIHRpbWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICgobW9udGhbMF0gIT09IG1vbnRoWzFdKSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoWzBdICsgJyAnICsgZGF0ZVswXSArICcgLSAnICsgbW9udGhbMV0gKyAnICcgKyBkYXRlWzFdICsgJyB8ICcgKyB0aW1lO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhbMF0gKyAnICcgKyBkYXRlWzBdICsgJyAtICcgKyBkYXRlWzFdICsgJyB8ICcgKyB0aW1lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=